{"name":"Simple-async","tagline":"A very lightweight javascript library for async iteration. Callback-chain-free. Zero dependency","body":"simple-async\r\n============\r\n\r\nA very lightweight javascript library for async iteration. Callback-chain-free. Zero dependency.\r\n\r\nEverytime I needed to do async iteration (for e.g. loading content sequentially from web services), ended up writing different versions of same logic to help. So why not put it up for everyone who needs it.\r\n\r\nThis library is modular and thin, easy-to-integrate with any libraries. And most importantly very simple.\r\n\r\nUsage\r\n=====\r\n\r\n```js\r\nvar a = [\"a\", \"b\", \"c\"];\r\n// You could do a for-loop, but why do that when you can do it async!\r\nnew AsyncIterator(\r\n    a, function(iterator){\r\n      // step\r\n      console.log(\"in step - \" + iterator.current() + \" - Remaining - \" + iterator.remaining());\r\n      iterator.step();\r\n    }, function(iterator){\r\n      // start\r\n      console.log(\"Starting the iteration\");\r\n    }, function(iterator){\r\n      // end\r\n      console.log(\"Ending the iteration\");\r\n    }\r\n).step();\r\n\r\n```\r\n\r\nExample\r\n======\r\n\r\nCheck out under examples folder\r\n\r\nDynamic loading images sequentially and showing them on a page\r\n\r\n\r\nHope it helps in reducing your rewrites for every project!\r\nLicensed under Apache v2 - aravind@cloudpact.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}